// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JusticeLeague.Client.Models {
    public class Hero : IParsable {
        /// <summary>The civillianName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CivillianName { get; set; }
#nullable restore
#else
        public string CivillianName { get; set; }
#endif
        /// <summary>The heroName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HeroName { get; set; }
#nullable restore
#else
        public string HeroName { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; private set; }
        /// <summary>The superpower property</summary>
        public JusticeLeague.Client.Models.Superpower? Superpower { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Hero CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Hero();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"civillianName", n => { CivillianName = n.GetStringValue(); } },
                {"heroName", n => { HeroName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"superpower", n => { Superpower = n.GetEnumValue<Superpower>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("civillianName", CivillianName);
            writer.WriteStringValue("heroName", HeroName);
            writer.WriteEnumValue<Superpower>("superpower", Superpower);
        }
    }
}
